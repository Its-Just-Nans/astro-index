---
import { existsSync, statSync } from "fs";
import { readdir } from "fs/promises";
import { join } from "path";
import BackImg from "./assets/back.gif";
import FolderImg from "./assets/folder.gif";
import UnknownImg from "./assets/unknown.gif";

const IMAGES_EXTS = ["png", "jpg", "jpeg", "tiff", "svg", "gif", "bmp", "webp", "ico"];
const VIEWABLE_EXTS = ["html", "htm", "pdf", "txt", "md", "csv", "json", "xml", "yaml", "yml"];

export interface IndexerProps {
    path: string;
    title?: string;
    preview?: boolean;
    previewUrl?: string;
    address?: string;
};

interface Props extends IndexerProps {};

const { path = ".", title = `Index of ${path}`, preview, previewUrl = path, address } = Astro.props;
if (!path) {
    throw new Error("path is required");
}
if (!existsSync(path)) {
    throw new Error(`astro-index path ${path} does not exist`);
}

const files = (await readdir(path)).sort();
---

<h1>{title}</h1>
{preview && (
    <style>
    .thumbnail {
        position: relative;
        z-index: 0;
    }

    .thumbnail:hover {
        background-color: transparent;
        z-index: 50;
    }

    .thumbnail span {
        position: absolute;
        padding: 5px;
        left: -1000px;
        border: 1px dashed gray;
        display: none;
        color: black;
        text-decoration: none;
    }

    .thumbnail span > * {
        border-width: 0;
        padding: 2px;
        min-width: 800px;
    }

    .thumbnail:hover span {
        display: block !important;
        top: 0;
        left: 60px; /*position where enlarged image should offset horizontally */
    }
</style>
)}
<table>
    <tr>
        <th valign="top">
            <img src={FolderImg.src} alt="[ICO]" />
        </th>
        <th><a href="">Name</a></th>
        <th><a href="">Last modified</a></th>
        <th><a href="">Size</a></th>
        <th><a href="">Description</a></th>
    </tr>
    <tr>
        <th colspan="5"><hr /></th>
    </tr>
    <tr>
        <td valign="top">
            <img src={BackImg.src} alt="[PARENTDIR]" />
        </td>
        <td><a href="..">Parent Directory</a></td>
        <td>&nbsp;</td>
        <td align="right">-</td>
        <td>&nbsp;</td>
    </tr>
    {
        files.map((file) => {
            const fullPath = join(path, file);
            const stat = statSync(fullPath);
            const isFolder = stat.isDirectory();
            const filePath = isFolder ? `${file}/` : file;
            const ext = isFolder ? null : file.split(".").pop()?.toLowerCase();
            const previewFile = join(previewUrl, file);
            return (
                <tr>
                    <td valign="top">
                        <img src={isFolder ? FolderImg.src : UnknownImg.src} alt="[]" />
                    </td>
                    <td>
                        <a class:list={{ thumbnail: preview }} href={filePath}>
                            {file}
                            {preview && ext && (
                                <>
                                    {IMAGES_EXTS.includes(ext) && (
                                        <span>
                                            <img src={previewFile} alt={`${file} preview`} />
                                        </span>
                                    )}
                                    {VIEWABLE_EXTS.includes(ext) && <iframe src={filePath} title={file} />}
                                </>
                            )}
                        </a>
                    </td>
                    <td align="right">{stat.mtime.toISOString()}</td>
                    <td align="right">{stat.size}</td>
                    <td>&nbsp;</td>
                </tr>
            );
        })
    }

    <tr>
        <th colspan="5"><hr /></th>
    </tr>
</table>
{
    (typeof address !== "undefined" && address) || (
        <address>
            List generated by <a href="https://github.com/Its-Just-Nans/astro-index">astro-index</a>
        </address>
    )
}
